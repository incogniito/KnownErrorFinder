package Frames;

import Frames.DaySelector;
import java.awt.Color;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import FileAccessors.AccessDataFromXML;
import schedules.Schedule;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author oluwakemiborisade
 */
public class Scheduler extends javax.swing.JFrame {
    
    private DefaultTableModel dtm;
    private static DefaultTableModel tableMod;
    private int scheduleId = -1;
    //informs viewSchedule window listener if the frame was closed by being saved or by cancel
    public boolean isSaved = false;
    private MainFrame mf;
    
    public Scheduler(MainFrame mf) {
        initComponents();
        setTitle("New Schedule");
        this.mf = mf;
    }
    
    //called from view all schedule with the purpose of only updating the xml document
    public Scheduler(int id, String name, Date scheduleTime, List <String> scheduleDay, List<String> folderPaths){
        
        initComponents();
        setTitle("Update Schedule");
        tableMod = (DefaultTableModel) daysTable.getModel();
        dtm = (DefaultTableModel) pathTable.getModel();
        
        //set datas from application to xml elements 
        nameField.setText(name);
        scheduleId = id;
        jSpinner1.setValue(scheduleTime);
         
        //add days selected to the table row
        for (String day : scheduleDay){
            
            tableMod.addRow(new Object[]{day});
        }
        //add selected folder paths to table row
        for (String path : folderPaths){
            
            dtm.addRow(new Object[]{path});
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        dayChooser = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pathTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        Date date = new Date ();
        SpinnerDateModel sTime =
        new SpinnerDateModel (date, null, null, Calendar.HOUR_OF_DAY);
        jSpinner1 = new javax.swing.JSpinner(sTime);
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        daysTable = new javax.swing.JTable();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        dayChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Weekdays", "Weekends", "Everyday", "Select day(s)" }));
        dayChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayChooserActionPerformed(evt);
            }
        });

        jLabel2.setText("Schedule Day");

        jLabel3.setText("Choose folder location(s) which contain logs");

        jLabel4.setText("Schedule Time");

        pathTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folder Path"
            }
        ));
        jScrollPane2.setViewportView(pathTable);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("-");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        JSpinner.DateEditor dEdit = new JSpinner.DateEditor(jSpinner1, "HH:mm:ss");
        jSpinner1.setEditor(dEdit);

        daysTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Days"
            }
        ));
        jScrollPane1.setViewportView(daysTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(210, 210, 210)
                                .addComponent(jLabel5)
                                .addGap(0, 10, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dayChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saveButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cancelButton)
                                        .addGap(50, 50, 50)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(92, 92, 92))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1))
                        .addComponent(jLabel5))
                    .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel7)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(5, 5, 5)
                        .addComponent(removeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(cancelButton)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void closeFrame(){
        super.dispose();
    }
    
    //save details entered as new schedule in xml file
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        
        int row = pathTable.getRowCount();
        int row1 = daysTable.getRowCount();
        String name = nameField.getText();
        
       // DateFormat s = new SimpleDateFormat("ss:mm:ss");
        Date scheduleTime = (Date) jSpinner1.getValue();
        
        List <String> folderPaths = new ArrayList();
        List <String> scheduleDay  = new ArrayList();  
        
        //check missing fields and tables
         if ((nameField.getText().equals(""))||((row1 == 0))||(row == 0)) {
            
             JOptionPane.showMessageDialog(null, "Missing fields","Error",JOptionPane.ERROR_MESSAGE);
                
            if (nameField.getText().equals("")){  
                  
                jLabel5.setText("Enter schedule name");
                jLabel5.setForeground(Color.red);
                
            }
            
            if (row1 == 0){  
                
                jLabel6.setText("Select schedule day");
                jLabel6.setForeground(Color.red);
            }
            if (row == 0){  
                
                jLabel7.setText("No path selected");
                jLabel7.setForeground(Color.red);
            }
        } 
         //if all fields have been filled out, add folders and days to list of String
            else{
                    for(int i = 0; i < row; i++ ){
                    String folders =  pathTable.getValueAt(i,0).toString();
                    folderPaths.add(folders);
                        
                }
                    for(int i = 0; i < row1; i++){
                    String day = daysTable.getValueAt(i,0).toString();
                    scheduleDay.add(day);
                }
         //save new schedule if id does not exist
            if(scheduleId == -1){
       
                AccessDataFromXML saveSchedule = new AccessDataFromXML();
                Schedule schedule = saveSchedule.newSchedule(name, scheduleTime, scheduleDay, folderPaths);
                mf.startScheduleThread(schedule);
                JOptionPane.showMessageDialog(null, "Schedule Saved");               
                closeFrame();
            
          //update existing schedule if id exists
            }else{
            
                AccessDataFromXML saveSchedule = new AccessDataFromXML();
                saveSchedule.updateSchedules(scheduleId, name, scheduleTime, scheduleDay, folderPaths);
                JOptionPane.showMessageDialog(null, "Schedule Saved");
                isSaved = true;
                closeFrame(); 
                }
  
     
   
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_nameFieldActionPerformed
//select and display chosen days in daysTable
    private void dayChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayChooserActionPerformed
        
        tableMod = (DefaultTableModel) daysTable.getModel();
        
        if(dayChooser.getSelectedItem().equals("Weekdays")){
         
            tableMod.setRowCount(0);
            tableMod.addRow(new Object[]{"Monday",});
            tableMod.addRow(new Object[]{"Tuesday"});
            tableMod.addRow(new Object[]{"Wednesday" });
            tableMod.addRow(new Object[]{"Thursday"});
            tableMod.addRow(new Object[]{"Friday"});
        }
        
        if(dayChooser.getSelectedItem().equals("Weekends")){
         
            tableMod.setRowCount(0);
            tableMod.addRow(new Object[]{"Saturday"});
            tableMod.addRow(new Object[]{"Sunday"});
        }
 
      if(dayChooser.getSelectedItem().equals("Everyday")){
          
            tableMod.setRowCount(0);
            tableMod.addRow(new Object[]{"Monday",});
            tableMod.addRow(new Object[]{"Tuesday"});
            tableMod.addRow(new Object[]{"Wednesday" });
            tableMod.addRow(new Object[]{"Thursday"});
            tableMod.addRow(new Object[]{"Friday"});
            tableMod.addRow(new Object[]{"Saturday"});
            tableMod.addRow(new Object[]{"Sunday"});
       }
      
      if(dayChooser.getSelectedItem().equals("Select day(s)")){
         
            DaySelector selectFrame = new DaySelector();
            selectFrame.setDefaultCloseOperation(DaySelector.DISPOSE_ON_CLOSE);
            selectFrame.setVisible(true);
       
       }
      
      if(dayChooser.getSelectedItem().equals("Choose")){
          
          tableMod.setRowCount(0);
      }
            
    }//GEN-LAST:event_dayChooserActionPerformed
//add a new folder path to the path table
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       //add only file directories to the table and display message dialog
        try{
            JFileChooser j = new JFileChooser();
            j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = j.showSaveDialog(this);
        
            if(returnVal == JFileChooser.APPROVE_OPTION) {  
            
                File folder = j.getSelectedFile();
                Vector v = new Vector();
                String path;
                dtm = (DefaultTableModel) pathTable.getModel();
                path = folder.getPath();
                v.add(path);
                dtm.addRow(v);
                JOptionPane.showMessageDialog(null, "Path Saved");
            
            }
           }catch (Exception e) 
                {
                    JOptionPane.showMessageDialog(null, "Error saving path");
                }
    }//GEN-LAST:event_addButtonActionPerformed
//remove existing folder paths from the table
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
         
        int val = JOptionPane.showConfirmDialog(null, "confirm Delete?", "Delete", JOptionPane.YES_OPTION);
        if ((pathTable.getSelectedRow() != -1) &&(val == 0)) {
            // remove selected row from the model
           dtm.removeRow(pathTable.getSelectedRow());
        }
        
    }//GEN-LAST:event_removeButtonActionPerformed
//cancel the scheduling action
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeFrame();
    }//GEN-LAST:event_cancelButtonActionPerformed
//Add the checked days to the days Table  
    public static void setDays(List<String> days){
        
        tableMod = (DefaultTableModel) daysTable.getModel();
        tableMod.setRowCount(0);
        
        for (String day : days){
            
            tableMod.addRow(new Object[]{day});
        }   
    }
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Scheduler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> dayChooser;
    private static javax.swing.JTable daysTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField nameField;
    private javax.swing.JTable pathTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
