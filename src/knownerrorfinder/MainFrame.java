/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package knownerrorfinder;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JMenuItem;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import knownerrorfinder.Panels.CloseFeatureTabButton;

import knownerrorfinder.Panels.KnownErrorFinder1;
import schedules.Schedule;
//import knownerrorfinder.Panels

/**
 *
 * @author samsonaiyegbusi
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        setTitle("Error Finder");

        checks = new KnownErrorFileChecker();
        executor = Executors.newCachedThreadPool();
        filler1.setEnabled(false);
        filler2.setEnabled(false);
        filler3.setEnabled(false);
        finders = new ArrayList();

        editOptionMenuSetup();
        reportOptionMenuSetup();
        fileCheck();
        addRecentHistoryItems();
        ExecuteSchedule.initialiseComponents(finder, featuresTabbedPane);
        startScheduleThreads(true);
        removeFocusFromPanelComponents();

    }
    private static ExecutorService executor;
    private KnownErrorFinder1 finder;
    public static List<String> recentHistory;
    private KnownErrorFileChecker checks;
    private static ExecuteSchedule runSchedule;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        featuresTabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileItem = new javax.swing.JMenuItem();
        openRecentMenu = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        importKnownErrorsItem = new javax.swing.JMenuItem();
        exportKnownErrorsItem = new javax.swing.JMenuItem();
        filler1 = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        selectAllMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        searchMenuItem = new javax.swing.JMenuItem();
        findNextMenuItem = new javax.swing.JMenuItem();
        findPreviousMenuItem = new javax.swing.JMenuItem();
        filler2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        newScheduleItem = new javax.swing.JMenuItem();
        updateScheduleItem = new javax.swing.JMenuItem();
        filler3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        openReportsItem = new javax.swing.JMenuItem();
        deleteReportsItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exportReportItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseEntered(evt);
            }
        });

        fileMenu.setText("File");

        openFileItem.setText("Open File");
        openFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileItem);

        openRecentMenu.setText("Open Recent");
        fileMenu.add(openRecentMenu);
        fileMenu.add(jSeparator1);

        importKnownErrorsItem.setText("Import Known Errors");
        importKnownErrorsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importKnownErrorsItemActionPerformed(evt);
            }
        });
        fileMenu.add(importKnownErrorsItem);

        exportKnownErrorsItem.setText("Export Known Errors");
        exportKnownErrorsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportKnownErrorsItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportKnownErrorsItem);

        jMenuBar1.add(fileMenu);
        jMenuBar1.add(filler1);

        editMenu.setText("Edit");

        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        selectAllMenuItem.setText("Select All");
        selectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(selectAllMenuItem);
        editMenu.add(jSeparator3);

        searchMenuItem.setText("Search");
        searchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(searchMenuItem);

        findNextMenuItem.setText("Find Next");
        findNextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findNextMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findNextMenuItem);

        findPreviousMenuItem.setText("Find Previous");
        findPreviousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPreviousMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findPreviousMenuItem);

        jMenuBar1.add(editMenu);
        jMenuBar1.add(filler2);

        jMenu3.setText("Schedule");

        newScheduleItem.setText("New Schedule");
        newScheduleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newScheduleItemActionPerformed(evt);
            }
        });
        jMenu3.add(newScheduleItem);

        updateScheduleItem.setText("Update Schedule");
        updateScheduleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateScheduleItemActionPerformed(evt);
            }
        });
        jMenu3.add(updateScheduleItem);

        jMenuBar1.add(jMenu3);
        jMenuBar1.add(filler3);

        jMenu4.setText("Reports");

        openReportsItem.setText("Open Reports");
        openReportsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReportsItemActionPerformed(evt);
            }
        });
        jMenu4.add(openReportsItem);

        deleteReportsItem.setText("Delete Reports");
        deleteReportsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReportsItemActionPerformed(evt);
            }
        });
        jMenu4.add(deleteReportsItem);
        jMenu4.add(jSeparator2);

        exportReportItem.setText("Export");
        exportReportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportReportItemActionPerformed(evt);
            }
        });
        jMenu4.add(exportReportItem);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(featuresTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(featuresTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileItemActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_openFileItemActionPerformed

    private void newScheduleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newScheduleItemActionPerformed
        Scheduler newSchedule = new Scheduler();
        newSchedule.setDefaultCloseOperation(Scheduler.DISPOSE_ON_CLOSE);
        newSchedule.setVisible(true);
    }//GEN-LAST:event_newScheduleItemActionPerformed

    private void importKnownErrorsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importKnownErrorsItemActionPerformed
        // TODO add your handling code here:

        FileMenuOptions mke = new FileMenuOptions(this);
        mke.openImportDialog();
    }//GEN-LAST:event_importKnownErrorsItemActionPerformed

    private void exportKnownErrorsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportKnownErrorsItemActionPerformed
        // TODO add your handling code here:
        FileMenuOptions mke = new FileMenuOptions(this);
        mke.openExportDialog();
    }//GEN-LAST:event_exportKnownErrorsItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        // TODO add your handling code here:
        finder.copy();
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void jMenuBar1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseEntered
        // TODO add your handling code here:
        editOptionMenuSetup();
    }//GEN-LAST:event_jMenuBar1MouseEntered

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        // TODO add your handling code here:
        finder.paste();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void selectAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllMenuItemActionPerformed
        // TODO add your handling code here:
        finder.selectAll();
    }//GEN-LAST:event_selectAllMenuItemActionPerformed

    private void searchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMenuItemActionPerformed
        // TODO add your handling code here:
        finder.search();
    }//GEN-LAST:event_searchMenuItemActionPerformed

    private void findNextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findNextMenuItemActionPerformed
        // TODO add your handling code here:
        finder.iterateDown();
    }//GEN-LAST:event_findNextMenuItemActionPerformed

    private void findPreviousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPreviousMenuItemActionPerformed
        // TODO add your handling code here:
        finder.iterateUp();
        
    }//GEN-LAST:event_findPreviousMenuItemActionPerformed

    private void updateScheduleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateScheduleItemActionPerformed
        ViewAllSchedules allSchedules = new ViewAllSchedules();
        allSchedules.setDefaultCloseOperation(Scheduler.DISPOSE_ON_CLOSE);
        allSchedules.setVisible(true);
    }//GEN-LAST:event_updateScheduleItemActionPerformed

    private void openReportsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReportsItemActionPerformed
        // TODO add your handling code here:
        ReportMenuOptions.openReports(this, finder, featuresTabbedPane);
        initTabComponent(featuresTabbedPane.getTabCount() - 1);

        if (featuresTabbedPane.getTabCount() > 1) {
            featuresTabbedPane.setSelectedIndex(featuresTabbedPane.getTabCount() - 1);

        }
    }//GEN-LAST:event_openReportsItemActionPerformed

    private void exportReportItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportReportItemActionPerformed
        // TODO add your handling code here:
        ReportMenuOptions.export(this);
    }//GEN-LAST:event_exportReportItemActionPerformed
    private void deleteReportsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReportsItemActionPerformed
        try {
            //ReportMenuOptions del = new ReportMenuOptions();
            ReportMenuOptions.deleteReports(this);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                  
    }//GEN-LAST:event_deleteReportsItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    //opens file
    private void openFile() {

        if (featuresTabbedPane.indexOfTab("Finder") == -1) {
            finder = new KnownErrorFinder1();
            addFinderInstances(finder);
            String filePath = finder.getFilePath();

            featuresTabbedPane.add("Finder", finder.getContentPane());
            editOptionMenuSetup();
            initTabComponent(featuresTabbedPane.getTabCount() - 1);

            if (recentHistory.contains(filePath)) {
                recentHistory.remove(filePath);
            }
            addFilePathToRecentHistory(filePath);

        } else {
            finder.openFile();
            String filePath = finder.getFilePath();
            if (recentHistory.contains(filePath)) {
                recentHistory.remove(filePath);
            }
            addFilePathToRecentHistory(finder.getFilePath());
        }
    }

    private void fileCheck() {
        //checks if file exists
        if (checks.checkIfRecentHistoryExists()) {
        } else {
            //if the file doesnt exist then one is created
            checks.createNewRecentHistoryFile();

        }

        //checks if file exists
        if (checks.checkIfFileExists()) {
        } else {
            //if the file doesnt exist then one is created
            checks.createNewKnownErrorFile();

        }

        if (checks.checkIfScheduleFileExists()) {
        } else {
            //if the file doesnt exist then one is created
            checks.createNewScheduleFile();

        }

        recentHistory = checks.readRecentHistoryFile();

    }

    private void addRecentHistoryItems() {
        openRecentMenu.removeAll();
        if (recentHistory != null) {
            for (String fileName : recentHistory) {
                JMenuItem item = new JMenuItem();
                item.setText(fileName);
                item.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {

                        if (featuresTabbedPane.indexOfTab("Finder") == -1) {
                            finder = new KnownErrorFinder1(fileName);
                            addFinderInstances(finder);
                            featuresTabbedPane.add("Finder", finder.getContentPane());
                            editOptionMenuSetup();
                            initTabComponent(featuresTabbedPane.getTabCount() - 1);

                            recentHistory.remove(fileName);
                            addFilePathToRecentHistory(finder.getFilePath());

                        } else {
                            boolean foundFile = finder.openFile(fileName);
                            if (foundFile == true) {
                                recentHistory.remove(fileName);
                                addFilePathToRecentHistory(finder.getFilePath());
                            } else {
                                addRecentHistoryItems();
                            }
                        }

                    }
                });
                openRecentMenu.add(item);
            }
        }

    }

    private void addFilePathToRecentHistory(String filePath) {

        if (recentHistory.size() == 5) {
            recentHistory.add(filePath);
            recentHistory.remove(0);
            checks.updateRecentHistoryFile(recentHistory);

            addRecentHistoryItems();

        } else {
            recentHistory.add(filePath);
            checks.updateRecentHistoryFile(recentHistory);

            addRecentHistoryItems();
        }
    }

    private void initTabComponent(int i) {

        featuresTabbedPane.setTabComponentAt(i, new CloseFeatureTabButton(featuresTabbedPane));
    }

    private void reportOptionMenuSetup() {
        exportReportItem.setEnabled(false);
        int index = featuresTabbedPane.getSelectedIndex();
        if (index != -1) {

            String tabTitle = featuresTabbedPane.getTitleAt(index);
            if (!tabTitle.equalsIgnoreCase("Finder")) {
                if (finder.getLogTabbedPane().getTabCount() > 0) {
                    if (finder.getUkeTable().getRowCount() > 0) {

                        exportReportItem.setEnabled(true);
                    }

                }
            }
        }
    }

    private void editOptionMenuSetup() {

        if (featuresTabbedPane.getTabCount() != 0) {
            boolean itemSelected = finder.isItemSelected();
            if (itemSelected == true) {
                copyMenuItem.setEnabled(true);
                copyMenuItem.setForeground(Color.BLACK);

                selectAllMenuItem.setEnabled(true);
                selectAllMenuItem.setForeground(Color.BLACK);

            } else {
                copyMenuItem.setEnabled(false);
                copyMenuItem.setForeground(Color.LIGHT_GRAY);

            }

            searchMenuItem.setEnabled(true);
            searchMenuItem.setForeground(Color.BLACK);

            findNextMenuItem.setEnabled(true);
            findNextMenuItem.setForeground(Color.BLACK);

            findPreviousMenuItem.setEnabled(true);
            findPreviousMenuItem.setForeground(Color.BLACK);

            boolean clipboardHasContent = EditMenuOptions.clipboardHasContent();
            if (clipboardHasContent == false) {
                pasteMenuItem.setEnabled(false);
                pasteMenuItem.setForeground(Color.LIGHT_GRAY);
            } else {
                pasteMenuItem.setEnabled(true);
                pasteMenuItem.setForeground(Color.BLACK);
            }
        } else {
            copyMenuItem.setEnabled(false);
            copyMenuItem.setForeground(Color.LIGHT_GRAY);

            pasteMenuItem.setEnabled(false);
            pasteMenuItem.setForeground(Color.LIGHT_GRAY);

            selectAllMenuItem.setEnabled(false);
            selectAllMenuItem.setForeground(Color.LIGHT_GRAY);

            findNextMenuItem.setEnabled(false);
            findNextMenuItem.setForeground(Color.LIGHT_GRAY);

            findPreviousMenuItem.setEnabled(false);
            findPreviousMenuItem.setForeground(Color.LIGHT_GRAY);

            searchMenuItem.setEnabled(false);
            searchMenuItem.setForeground(Color.LIGHT_GRAY);
        }
    }

    public static void startScheduleThreads(boolean fromMainFrame) {

        List<Schedule> schedules = AccessDataFromXML.retrieveSchedules();
        if (fromMainFrame == false) {

            executor.shutdownNow();
            executor = Executors.newCachedThreadPool();
        }
        for (Schedule schedule : schedules) {
            runSchedule = new ExecuteSchedule(schedule);
            executor.submit(runSchedule);

        }
    }

    public void removeFocusFromPanelComponents() {

        ChangeListener changeListener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent changeEvent) {

                JTabbedPane sourceTabbedPane = (JTabbedPane) changeEvent.getSource();
                int index = sourceTabbedPane.getSelectedIndex();

                if (featuresTabbedPane.getTabCount() != 0) {

                    //update tables
                    finder = finders.get(index);
                    finder.deselectAllTableRows();

                    reportOptionMenuSetup();
                } else {
                    finder.deselectAllTableRows();
                }

            }
        };

        featuresTabbedPane.addChangeListener(changeListener);

    }

    public void addFinderInstances(KnownErrorFinder1 kef) {
        finders.add(kef);
    }

    public KnownErrorFinder1 getSelectedFinder() {

        int index = featuresTabbedPane.getSelectedIndex();
        return finders.get(index);
    }

    public static void removeFinder(int position) {
        finders.remove(position);

    }

    private static List<KnownErrorFinder1> finders;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem deleteReportsItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exportKnownErrorsItem;
    private javax.swing.JMenuItem exportReportItem;
    private javax.swing.JTabbedPane featuresTabbedPane;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu filler1;
    private javax.swing.JMenu filler2;
    private javax.swing.JMenu filler3;
    private javax.swing.JMenuItem findNextMenuItem;
    private javax.swing.JMenuItem findPreviousMenuItem;
    private javax.swing.JMenuItem importKnownErrorsItem;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem newScheduleItem;
    private javax.swing.JMenuItem openFileItem;
    private javax.swing.JMenu openRecentMenu;
    private javax.swing.JMenuItem openReportsItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem searchMenuItem;
    private javax.swing.JMenuItem selectAllMenuItem;
    private javax.swing.JMenuItem updateScheduleItem;
    // End of variables declaration//GEN-END:variables

}
