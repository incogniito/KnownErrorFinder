/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package knownerrorfinder;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JMenuItem;

import knownerrorfinder.Panels.CloseTab;
import knownerrorfinder.Panels.KnownErrorFinder1;


/**
 *
 * @author samsonaiyegbusi
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        checks = new KnownErrorFileChecker();
        
        featuresTabbedPane.setUI(new CloseTab());

        fileCheck();
        addRecentHistoryItems();
    }

    private KnownErrorFinder1 finder;
    private List<String> recentHistory;
    private KnownErrorFileChecker checks;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        featuresTabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileItem = new javax.swing.JMenuItem();
        openRecentMenu = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        importKnownErrorsItem = new javax.swing.JMenuItem();
        exportKnownErrorsItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        newScheduleItem = new javax.swing.JMenuItem();
        updateScheduleItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        openReportsItem = new javax.swing.JMenuItem();
        OpenRecentReportItem = new javax.swing.JMenuItem();
        manageReportsItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exportReportItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setText("File");

        openFileItem.setText("Open File");
        openFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileItem);

        openRecentMenu.setText("Open Recent");
        fileMenu.add(openRecentMenu);
        fileMenu.add(jSeparator1);

        importKnownErrorsItem.setText("Import Known Errors");
        fileMenu.add(importKnownErrorsItem);

        exportKnownErrorsItem.setText("Export Known Errors");
        fileMenu.add(exportKnownErrorsItem);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Schedule");

        newScheduleItem.setText("New Schedule");
        newScheduleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newScheduleItemActionPerformed(evt);
            }
        });
        jMenu3.add(newScheduleItem);

        updateScheduleItem.setText("Update Schedule");
        jMenu3.add(updateScheduleItem);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Reports");

        openReportsItem.setText("Open Reports");
        jMenu4.add(openReportsItem);

        OpenRecentReportItem.setText("Open Most Recent Report");
        jMenu4.add(OpenRecentReportItem);

        manageReportsItem.setText("Manage Reports");
        jMenu4.add(manageReportsItem);
        jMenu4.add(jSeparator2);

        exportReportItem.setText("Export");
        jMenu4.add(exportReportItem);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(featuresTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(featuresTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileItemActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_openFileItemActionPerformed

    private void newScheduleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newScheduleItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newScheduleItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    //opens file
    private void openFile() {

        if (featuresTabbedPane.getTabCount() == 0) {
            finder = new KnownErrorFinder1();
            String filePath = finder.getFilePath();
            
           
           featuresTabbedPane.add("Finder    ", finder.getContentPane());

            if (recentHistory.contains(filePath))
            {
                recentHistory.remove(filePath);
            }
            addFilePathToRecentHistory(filePath);

        } else {
            finder.openFile();
            String filePath = finder.getFilePath();
            if (recentHistory.contains(filePath))
            {
                recentHistory.remove(filePath);
            }
            addFilePathToRecentHistory(finder.getFilePath());
        }

    }

    private void fileCheck() {
        //checks if file exists
        if (checks.checkIfRecentHistoryExists()) {
        } else {
            //if the file doesnt exist then one is created
            checks.createNewRecentHistoryFile();

        }

        //checks if file exists
        if (checks.checkIfFileExists()) {
        } else {
            //if the file doesnt exist then one is created
            checks.createNewKnownErrorFile();

        }

        recentHistory = checks.readRecentHistoryFile();

    }

    private void addRecentHistoryItems() {
        openRecentMenu.removeAll();
        if (recentHistory != null) {
            for (String fileName : recentHistory) {
                JMenuItem item = new JMenuItem();
                item.setText(fileName);
                item.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {

                        if (featuresTabbedPane.getTabCount() == 0) {
                            finder = new KnownErrorFinder1(fileName);
                            featuresTabbedPane.add("Finder  ", finder.getContentPane());
                            
                recentHistory.remove(fileName);
                addFilePathToRecentHistory(finder.getFilePath());

                        } else {
                            finder.openFile(fileName);
                            recentHistory.remove(fileName);
                            addFilePathToRecentHistory(finder.getFilePath());
                        }

                    }
                });
                openRecentMenu.add(item);
            }
        }

    }

    private void addFilePathToRecentHistory(String filePath) {

        if (recentHistory.size() == 5) {
            recentHistory.add(0, filePath);
            recentHistory.remove(5);
            checks.updateRecentHistoryFile(recentHistory);

            addRecentHistoryItems();

        } else {
            recentHistory.add(filePath);
            checks.updateRecentHistoryFile(recentHistory);
            addRecentHistoryItems();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem OpenRecentReportItem;
    private javax.swing.JMenuItem exportKnownErrorsItem;
    private javax.swing.JMenuItem exportReportItem;
    private javax.swing.JTabbedPane featuresTabbedPane;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importKnownErrorsItem;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem manageReportsItem;
    private javax.swing.JMenuItem newScheduleItem;
    private javax.swing.JMenuItem openFileItem;
    private javax.swing.JMenu openRecentMenu;
    private javax.swing.JMenuItem openReportsItem;
    private javax.swing.JMenuItem updateScheduleItem;
    // End of variables declaration//GEN-END:variables

}
